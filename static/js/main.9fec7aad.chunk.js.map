{"version":3,"sources":["features/calculator/calculatorSlice.js","App.js","app/store.js","serviceWorker.js","theme.js","index.js"],"names":["initialState","options","title","insideSourceTown","distanceFromSourceTown","baseRate","perKm","selectedOption","actualKm","finalDf","calculatorSlice","createSlice","name","reducers","setSelectedOptions","state","action","payload","setActualKm","parseFloat","setFinalDf","reset","actions","selectCalculator","calculator","App","useSelector","dispatch","useDispatch","className","Autocomplete","value","onChange","event","newValue","id","getOptionLabel","option","style","minWidth","maxWidth","marginTop","renderInput","params","TextField","label","variant","type","target","disabled","fontWeight","Button","color","marginRight","onClick","additionalDf","store","configureStore","reducer","calculatorReducer","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fec7aad.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  options: [\n    {\n      title: 'WingShots',\n      insideSourceTown: false,\n      distanceFromSourceTown: 3.4,\n      baseRate: 50.00,\n      perKm: 15.00,\n    }\n  ],\n  selectedOption: null,\n  actualKm: 0.0,\n  finalDf: 0.0\n}\n\nexport const calculatorSlice = createSlice({\n  name: 'calculator',\n  initialState,\n  reducers: {\n    setSelectedOptions: (state, action) => {\n      state.selectedOption = action.payload\n    },\n    setActualKm: (state, action) => {\n      state.actualKm = parseFloat(action.payload)\n    },\n    setFinalDf: (state, action) => {\n      state.finalDf = action.payload\n    },\n    reset: state => initialState\n  }\n});\n\nexport const { setSelectedOptions, setActualKm, setFinalDf, reset } = calculatorSlice.actions;\nexport const selectCalculator = (state) => state.calculator;\nexport default calculatorSlice.reducer;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.css';\nimport {\n  selectCalculator,\n  setSelectedOptions,\n  setActualKm,\n  setFinalDf,\n  reset\n} from \"./features/calculator/calculatorSlice\";\nimport {Button} from \"@material-ui/core\";\n\nconst App = () => {\n  const calculator = useSelector(selectCalculator);\n  const dispatch = useDispatch();\n\n  const calculate = () => {\n    const { selectedOption, actualKm } = calculator;\n    const {\n      insideSourceTown,\n      distanceFromSourceTown,\n      baseRate,\n      perKm\n    } = selectedOption;\n\n    let finalDf;\n    if (insideSourceTown) {\n      finalDf = (perKm * actualKm) + baseRate;\n    } else {\n      let additionalDf = 0.0;\n      if (actualKm <= 2.9) {\n        additionalDf = (distanceFromSourceTown / 2) * 10;\n      }\n      finalDf = (perKm * actualKm) + baseRate + additionalDf;\n    }\n    dispatch(setFinalDf(finalDf));\n  }\n  return (\n    <div className=\"App\">\n      <Autocomplete\n          value={calculator.selectedOption}\n          onChange={(event, newValue) =>\n            dispatch(setSelectedOptions(newValue))\n          }\n          id=\"store-codes\"\n          options={calculator.options}\n          getOptionLabel={(option) => option.title}\n          style={{ minWidth: 300, maxWidth: 400, marginTop: '2rem' }}\n          renderInput={(params) => <TextField {...params} label=\"Store Code\" variant=\"outlined\" />}\n      />\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Actual KM\"\n        variant=\"outlined\"\n        style={{ minWidth: 300, maxWidth: 400, marginTop: '1.5rem' }}\n        type={\"number\"}\n        onChange={event => dispatch(setActualKm(event.target.value))}\n        value={parseFloat(calculator.actualKm) === 0.0 ? '' : parseFloat(calculator.actualKm)}\n        disabled={!calculator.selectedOption}\n      />\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Final DF\"\n        variant=\"outlined\"\n        style={{ minWidth: 300, maxWidth: 400,  marginTop: '1.5rem', fontWeight: 'bold' }}\n        type={\"number\"}\n        value={calculator.finalDf}\n        disabled={true}\n      />\n      <div className=\"buttonWrapper\">\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          style={{\n            minWidth: 140, maxWidth: 180,  marginRight: 10, fontWeight: 'bold', color: '#fff'\n          }}\n          onClick={calculate}\n          disabled={!calculator.selectedOption || calculator.actualKm === 0.0}\n        >\n          Calculate\n        </Button>\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          style={{ minWidth: 140, maxWidth: 180, fontWeight: 'bold' }}\n          onClick={() => dispatch(reset())}\n        >\n          Clear\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport calculatorReducer from '../features/calculator/calculatorSlice';\n\nexport const store = configureStore({\n  reducer: {\n    calculator: calculatorReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#ffa500',\n        },\n        secondary: {\n            main: '#19857b',\n        },\n        error: {\n            main: red.A400,\n        },\n        background: {\n            default: '#fff',\n        },\n    },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <App />\n        </Provider>\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}